'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _windowManager = require('./window-manager');

var _windowManager2 = _interopRequireDefault(_windowManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withWindow = function withWindow(ComposedComponent) {
  return function (_Component) {
    _inherits(WindowDecorator, _Component);

    function WindowDecorator() {
      _classCallCheck(this, WindowDecorator);

      var _this = _possibleConstructorReturn(this, (WindowDecorator.__proto__ || Object.getPrototypeOf(WindowDecorator)).call(this));

      var state = {
        dimensions: {
          width: 0,
          height: 0
        },
        breakpoint: null,
        orientation: null,
        isTouchDevice: false
      };

      // Check for universal rendering
      if (typeof window !== 'undefined') {
        _this.windowManager = new _windowManager2.default();

        // Initial state
        state.breakpoint = _this.windowManager.getBreakpoint();
        state.dimensions = _this.windowManager.getDimensions();
        state.orientation = _this.windowManager.getOrientation();
        state.isTouchDevice = _this.windowManager.isTouchDevice();

        // Bind events
        _this.handleWindowResize = _this.handleWindowResize.bind(_this);
        window.addEventListener('window-resize', _this.handleWindowResize);
      }

      _this.state = state;
      return _this;
    }

    _createClass(WindowDecorator, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        // Remove and reset interval/animationFrame
        cancelAnimationFrame(this.animationFrameRef);
        window.removeEventListener('window-resize', this.handleWindowResize);
        this.windowManager.removeListener();
        this.windowManager = null;
      }
    }, {
      key: 'handleWindowResize',
      value: function handleWindowResize(e) {
        var _this2 = this;

        var _state = this.state,
            breakpoint = _state.breakpoint,
            dimensions = _state.dimensions,
            orientation = _state.orientation;


        var newBreakpoint = e.detail.breakpoint;
        var newDimensions = e.detail.dimensions;
        var newOrientation = e.detail.orientation;

        // Update the state only when data has changed
        if (newOrientation !== orientation || newBreakpoint !== breakpoint || newDimensions.width !== dimensions.width || newDimensions.height !== dimensions.height) {
          cancelAnimationFrame(this.animationFrameRef);
          this.animationFrameRef = requestAnimationFrame(function () {
            _this2.setState({
              breakpoint: newBreakpoint,
              dimensions: newDimensions,
              orientation: newOrientation
            });
          });
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _state2 = this.state,
            breakpoint = _state2.breakpoint,
            dimensions = _state2.dimensions,
            orientation = _state2.orientation,
            isTouchDevice = _state2.isTouchDevice;


        return _react2.default.createElement(ComposedComponent, _extends({}, this.props, {
          breakpoint: breakpoint,
          dimensions: dimensions,
          orientation: orientation,
          isTouchDevice: isTouchDevice
        }));
      }
    }]);

    return WindowDecorator;
  }(_react.Component);
};

exports.default = withWindow;